Q1. query:
SELECT CUSTOMER_ID, COUNT(ORDER_ID) AS NO_OF_ORDERS
FROM ORDERS 
GROUP BY CUSTOMER_ID
ORDER BY NO_OF_ORDERS DESC;

Q2. query:
SELECT CUSTOMER_ID, AVG(PROS_PER_ORDER.TOTAL) AS AVG_PROD
FROM ORDERS INNER JOIN  
      (SELECT ORDER_ID, SUM(QUANTITY) AS TOTAL FROM ORDER_ITEMS GROUP BY ORDER_ID) AS PROS_PER_ORDER
      ON ORDERS.ORDER_ID=PROS_PER_ORDER.ORDER_ID
GROUP BY CUSTOMER_ID;

Q3. QUERY:
SELECT O.CUSTOMER_ID, P.ORDER_ID, P.PRODUCT_ID, P.SUM_OF_PROD 
FROM ORDERS AS O INNER JOIN 
      (SELECT ORDER_ID, OI.PRODUCT_ID,PROD_COUNT.SUM_OF_PROD FROM ORDER_ITEMS AS OI INNER JOIN 
            (SELECT DISTINCT PRODUCT_ID, SUM(QUANTITY) AS SUM_OF_PROD FROM ORDER_ITEMS GROUP BY PRODUCT_ID)
            AS PROD_COUNT ON PROD_COUNT.PRODUCT_ID=OI.PRODUCT_ID) AS P 
      ON P.ORDER_ID = O.ORDER_ID 
ORDER BY O.CUSTOMER_ID;

Q4. query:
SELECT CUSTOMER_ID, O.PRODUCT_NAME 
FROM ORDERS
INNER JOIN (SELECT PRODUCT_NAME, ORDER_ID FROM ORDER_ITEMS, PRODUCTS WHERE ORDER_ITEMS.PRODUCT_ID = PRODUCTS.PRODUCT_ID) as O
      ON ORDERS.ORDER_ID=O.ORDER_ID
WHERE STATUS = 'backordered';

Q5. QUERY:
WITH CTE AS (
      SELECT CUSTOMER_ID, COUNT(ORDER_ID) AS FULL_ORDER
      FROM ORDERS
      WHERE STATUS = 'fulfilled'
      GROUP BY CUSTOMER_ID
)
SELECT CUSTOMER_ID AS LIST_OF_CUST_WITH_1F0
FROM CTE 
WHERE CTE.FULL_ORDER = 1;

Q6. QUERY:
SELECT ORDER_ID, PRODUCT_ID,
SUM(QUANTITY), RANK() OVER (PARTITION BY ORDER_ID ORDER BY SUM(QUANTITY) DESC) AS ITEM_ID 
FROM ORDER_ITEMS 
GROUP BY ORDER_ID, PRODUCT_ID 
ORDER BY ORDER_ID 
FETCH FIRST 5 ROWS ONLY;
